(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{293:function(t,i,a){"use strict";a.r(i);var l=a(10),v=Object(l.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"spring-篇"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-篇"}},[t._v("#")]),t._v(" Spring 篇")]),t._v(" "),i("h2",{attrs:{id:"ioc"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" IOC")]),t._v(" "),i("h4",{attrs:{id:"general"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#general"}},[t._v("#")]),t._v(" General：")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("ioc实现的方式")])]),t._v(" "),i("ul",[i("li",[t._v("纯xml形式（bean信息定义全部配置到xml中管理）")]),t._v(" "),i("li",[t._v("xml+注解形式")]),t._v(" "),i("li",[t._v("纯注解形式")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("IOC容器的启动方式")])]),t._v(" "),i("ul",[i("li",[t._v("带有xml的启动方式\n"),i("ul",[i("li",[t._v("JavaSE："),i("code",[t._v('ApplicationContext app =new ClassPathXmlApplicationContext("beans.xml");')])]),t._v(" "),i("li",[t._v("JavaWeb: "),i("code",[t._v("ContextLoadListener(配置监听器 加载xml)")])])])]),t._v(" "),i("li",[t._v("纯注解形式\n"),i("ul",[i("li",[t._v("JavaSE："),i("code",[t._v("ApplicationContext app =new AnnotationConfigApplicationContext(springConfig.class);")])]),t._v(" "),i("li",[t._v("JavaWeb: "),i("code",[t._v("ContextLoadListener(配置监听器 加载xml)")])])])])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("Bean作用域")])])]),t._v(" "),i("li",[i("p",[t._v("Singleton  - 单例模式(销毁容器时，对象就被销毁)")])]),t._v(" "),i("li",[i("p",[t._v("Prototype -  原型模式（多例）/ 每次都会生成一个新的bean （spring只负责创建bean，不负责销毁。GC回收）")])]),t._v(" "),i("li",[i("p",[t._v("Request")])]),t._v(" "),i("li",[i("p",[t._v("Seesion")])]),t._v(" "),i("li",[i("p",[t._v("Application")])]),t._v(" "),i("li",[i("p",[t._v("Websocket")])])]),t._v(" "),i("h4",{attrs:{id:"lazy-init-延迟加载"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#lazy-init-延迟加载"}},[t._v("#")]),t._v(" Lazy-Init  延迟加载")]),t._v(" "),i("p",[t._v("ApplicationContext容器中默认是在启动服务器时将所有的 作用域为’singleton‘ 的bean提前初始化。")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("配置延迟加载")])]),t._v(" "),i("ul",[i("li",[t._v("xml方式： 在xml中 "),i("code",[t._v("<bean id ='Test1' class = 'com.edu.....' lazy-init = 'true'>")]),t._v("开启了延迟加载")]),t._v(" "),i("li",[t._v("在纯注解方式： 可以在Test1 的这个实体类上 加上@Lazy 这个注解 表示开启延迟加载")])])]),t._v(" "),i("li",[i("p",[t._v("应用场景")]),t._v(" "),i("ul",[i("li",[t._v("开启延迟加载在一定程度上可以提高容器启动和服务器运转性能。")]),t._v(" "),i("li",[t._v("对于不常 使用的Bean设置延迟加载， 可以节省资源消耗。")])])])]),t._v(" "),i("p",[t._v("​")])])}),[],!1,null,null,null);i.default=v.exports}}]);